----------------- Testing Function: fullDeckCount() ----------------
==TEST 1: check if calling function changes game state
PASS:  numPlayers count = 2  expected = 2
PASS:  outpostPlayed count = 0  expected = 0
PASS:  outpostTurn count = 0  expected = 0
PASS:  whoseTurn count = 0  expected = 0
PASS:  phase count = 0  expected = 0
PASS:  numActions count = 1  expected = 1
PASS:  coins count = 4  expected = 4
PASS:  numBuys count = 1  expected = 1
PASS:  playedCardCount count = 0  expected = 0

==TEST 2: Check if card is found in first hand position
PASS:  Found 1 council_room in hand expected = 1
==TEST 3: Check if card is found in MAX_HAND hand position
FAIL:  Found 0 council_room in hand expected = 1
==TEST 4: Check if card is found in first discard position
FAIL:  Found 0 council_room in discard expected = 1
==TEST 5: Check if card is found in MAX_DECK discard position
FAIL:  Found 0 council_room in discard expected = 1
==TEST 6: Check if undiscarded card is found
PASS:  Found 0 council_room in discard expected = 0
==TEST 7: Check if card not in hand is found
PASS:  Found 0 council_room in hand expected = 0
==TEST 7: Check if player2 is unaffected STATE OF GAME
PASS:  PLAYER2 hand count = 0, expected = 0
PASS:  PLAYER2 discard count = 0 expected = 0
PASS:  PLAYER2 deck count = 10 expected = 10


 >>>>> Testing complete fullDeckCount() <<<<<

----------------- Testing Function: getCost() ----------------
==TEST 1: check if calling function changes game state
PASS:  numPlayers count = 2  expected = 2
PASS:  outpostPlayed count = 0  expected = 0
PASS:  outpostTurn count = 0  expected = 0
PASS:  whoseTurn count = 0  expected = 0
PASS:  phase count = 0  expected = 0
PASS:  numActions count = 1  expected = 1
PASS:  coins count = 4  expected = 4
PASS:  numBuys count = 1  expected = 1
PASS:  playedCardCount count = 0  expected = 0

==TEST 2: Check if card values match with hardcoded referenced via web
PASS:  Cost of curse = 0, expected = 0
PASS:  Cost of estate = 2, expected = 1
PASS:  Cost of duchy = 5, expected = 2
PASS:  Cost of province = 8, expected = 3
PASS:  Cost of copper = 0, expected = 4
PASS:  Cost of silver = 3, expected = 5
PASS:  Cost of gold = 6, expected = 6
PASS:  Cost of adventurer = 6, expected = 7
PASS:  Cost of council_room = 5, expected = 8
PASS:  Cost of feast = 4, expected = 9
PASS:  Cost of gardens = 4, expected = 10
PASS:  Cost of mine = 5, expected = 11
PASS:  Cost of remodel = 4, expected = 12
PASS:  Cost of smithy = 4, expected = 13
PASS:  Cost of village = 3, expected = 14
PASS:  Cost of baron = 4, expected = 15
PASS:  Cost of great_hall = 3, expected = 16
PASS:  Cost of minion = 5, expected = 17
PASS:  Cost of steward = 3, expected = 18
PASS:  Cost of tribute = 5, expected = 19
PASS:  Cost of ambassador = 3, expected = 20
PASS:  Cost of cutpurse = 4, expected = 21
PASS:  Cost of embargo = 2, expected = 22
PASS:  Cost of outpost = 5, expected = 23
PASS:  Cost of salvager = 4, expected = 24
PASS:  Cost of sea_hag = 4, expected = 25
PASS:  Cost of treasure_map = 4, expected = 26

==TEST 3: Check if player1 is unaffected STATE OF GAME
PASS:  PLAYER1 hand count = 5, expected = 5
PASS:  PLAYER1 discard count = 0 expected = 0
PASS:  PLAYER1 deck count = 5 expected = 5

==TEST 4: Check if player2 is unaffected STATE OF GAME
PASS:  PLAYER2 hand count = 0, expected = 0
PASS:  PLAYER2 discard count = 0 expected = 0
PASS:  PLAYER2 deck count = 10 expected = 10


 >>>>> Testing complete getCost() <<<<<

----------------- Testing Function: whoseTurn() ----------------

==TEST 1: check if calling function changes game state
PASS:  numPlayers count = 2  expected = 2
PASS:  outpostPlayed count = 0  expected = 0
PASS:  outpostTurn count = 0  expected = 0
PASS:  whoseTurn count = 0  expected = 0
PASS:  phase count = 0  expected = 0
PASS:  numActions count = 1  expected = 1
PASS:  coins count = 4  expected = 4
PASS:  numBuys count = 1  expected = 1
PASS:  playedCardCount count = 0  expected = 0


==TEST 2: Check if turn is current player's
PASS:  Current turn = 0 expected = 0

==TEST 3: Check if turn is player 2 turn
PASS:  Current turn = 1 expected = 1

==TEST 3: Check if turn is player 2 turn
PASS:  Current turn = 10000 expected = 10000

==TEST 3: Check if turn is player -1 turn
PASS:  Current turn = -1 expected = -1

 >>>>> Testing complete whoseTurn() <<<<<

----------------- Testing Function: handCard() ----------------

==TEST 1: check if calling function changes game state
PASS:  numPlayers count = 2  expected = 2
PASS:  outpostPlayed count = 0  expected = 0
PASS:  outpostTurn count = 0  expected = 0
PASS:  whoseTurn count = 0  expected = 0
PASS:  phase count = 0  expected = 0
PASS:  numActions count = 1  expected = 1
PASS:  coins count = 4  expected = 4
PASS:  numBuys count = 1  expected = 1
PASS:  playedCardCount count = 0  expected = 0


==TEST 2: Check if card is found in first hand position
PASS:  Found in hand position 0 = council_room expected = council_room

==TEST 3: Check if card is found in MAX_HAND hand position
PASS:  Found in hand position 500 = council_room expected = council_room

==TEST 4: Check if card not in hand is found
PASS:  Found in hand position 0 = (null) expected = (null)


==TEST 5: Run all cards in hand pos 1 to see if found in hand-
PASS:  found curse expected = curse
PASS:  found estate expected = estate
PASS:  found duchy expected = duchy
PASS:  found province expected = province
PASS:  found copper expected = copper
PASS:  found silver expected = silver
PASS:  found gold expected = gold
PASS:  found adventurer expected = adventurer
PASS:  found council_room expected = council_room
PASS:  found feast expected = feast
PASS:  found gardens expected = gardens
PASS:  found mine expected = mine
PASS:  found remodel expected = remodel
PASS:  found smithy expected = smithy
PASS:  found village expected = village
PASS:  found baron expected = baron
PASS:  found great_hall expected = great_hall
PASS:  found minion expected = minion
PASS:  found steward expected = steward
PASS:  found tribute expected = tribute
PASS:  found ambassador expected = ambassador
PASS:  found cutpurse expected = cutpurse
PASS:  found embargo expected = embargo
PASS:  found outpost expected = outpost
PASS:  found salvager expected = salvager
PASS:  found sea_hag expected = sea_hag
PASS:  found treasure_map expected = treasure_map

==TEST 6: Check if player2 is unaffected STATE OF GAME
PASS:  PLAYER2 hand count = 0, expected = 0
PASS:  PLAYER2 discard count = 0 expected = 0
PASS:  PLAYER2 deck count = 10 expected = 10


 >>>>> Testing complete handCard() <<<<<

----------------- Testing Card cardEffect(): smithy ----------------
==TEST 1 cardEffect(): Smithy draws +3 cards and discards 1
TEST 1a: Check player 1 changes
FAIL:  PLAYER1 hand count = 9, expected = 7
PASS:  PLAYER1 discard count = 0 expected = 1
FAIL:  PLAYER1 deck count = 0 expected = 2

TEST 1b: Check if player2 is unaffected STATE OF GAME
PASS:  PLAYER2 hand count = 0, expected = 0
PASS:  PLAYER2 discard count = 0 expected = 0
PASS:  PLAYER2 deck count = 10 expected = 10


 >>>>> Testing complete smithy <<<<<

----------------- Testing Card cardEffect(): adventurer ----------------
==TEST 1 cardEffect(): Adventurer gives +2 copper and discards 0
cards in deck pos 0,1

TEST 1a: Check player 1 changes
PASS:  PLAYER1 hand count = 7, expected = 7
PASS:  PLAYER1 discard count = 0 expected = 0
FAIL:  PLAYER1 deck count = 0 expected = 3

TEST 1b: Check if player2 is unaffected STATE OF GAME
PASS:  PLAYER2 hand count = 0, expected = 0
PASS:  PLAYER2 discard count = 0 expected = 0
PASS:  PLAYER2 deck count = 10 expected = 10

==TEST 2 cardEffect(): Adventurer gives +2 copper and discards 2
cards in deck pos 2,3

TEST 2a: Check player 1 changes
PASS:  PLAYER1 hand count = 7, expected = 7
PASS:  PLAYER1 discard count = 2 expected = 2
PASS:  PLAYER1 deck count = 0 expected = 0

TEST 2b: Check if player2 is unaffected STATE OF GAME
PASS:  PLAYER2 hand count = 0, expected = 0
PASS:  PLAYER2 discard count = 0 expected = 0
PASS:  PLAYER2 deck count = 10 expected = 10

 >>>>> Testing complete adventurer <<<<<

----------------- Testing Card: council room ----------------
==TEST 1: council room draws +3 cards and discards 1
TEST 1a: Check player 1 changes
PASS:  PLAYER1 hand count = 8, expected = 8
PASS:  PLAYER1 discard count = 0 expected = 0
FAIL:  PLAYER1 deck count = 1 expected = 2
PASS:  Number of buys count = 2 expected = 2

TEST 1b: Check if player2 is unaffected STATE OF GAME
PASS:  PLAYER2 hand count = 1, expected = 1
PASS:  PLAYER2 discard count = 0 expected = 0
PASS:  PLAYER2 deck count = 9 expected = 9


 >>>>> Testing complete council room <<<<<

----------------- Testing Card: village ----------------
PASS:  numPlayers count = 2  expected = 2
PASS:  outpostPlayed count = 0  expected = 0
PASS:  outpostTurn count = 0  expected = 0
PASS:  whoseTurn count = 0  expected = 0
PASS:  phase count = 0  expected = 0
PASS:  numActions count = 3  expected = 3
PASS:  coins count = 4  expected = 4
PASS:  numBuys count = 1  expected = 1
FAIL:  playedCardCount count = 1  expected = 0


==TEST 1: village draws +1 card
TEST 1a: Check player 1 changes
FAIL:  PLAYER1 hand count = 5, expected = 6
PASS:  PLAYER1 discard count = 0 expected = 0
FAIL:  PLAYER1 deck count = 4 expected = 4
PASS:  Number of buys count = 1 expected = 1
PASS:  Number of actions count = 3 expected = 3

TEST 1b: Check if player2 is unaffected STATE OF GAME
FAIL:  PLAYER2 hand count = 0, expected = 1
PASS:  PLAYER2 discard count = 0 expected = 0
FAIL:  PLAYER2 deck count = 10 expected = 9


 >>>>> Testing complete village <<<<<

File 'dominion.c'
Lines executed:33.73% of 584
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      240:    8:int compare(const void *a, const void *b)
        -:    9:{
      240:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      240:   12:  if (*(int *)a < *(int *)b)
       64:   13:    return -1;
      176:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        8:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        8:   48:  SelectStream(1);
        8:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        8:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        8:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       88:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      880:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      800:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        8:   76:  if (numPlayers == 2)
        -:   77:  {
        8:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        8:   90:  if (numPlayers == 2)
        -:   91:  {
        8:   92:    state->supplyCount[estate] = 8;
        8:   93:    state->supplyCount[duchy] = 8;
        8:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        8:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  105:  state->supplyCount[silver] = 40;
        8:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      168:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     1320:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     1240:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       80:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       16:  118:          if (numPlayers == 2)
        -:  119:          {
        8:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
       72:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       80:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1160:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       24:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       16:  146:    state->deckCount[i] = 0;
       64:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
       48:  149:      state->deck[i][j] = estate;
       48:  150:      state->deckCount[i]++;
        -:  151:    }
      128:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      112:  154:      state->deck[i][j] = copper;
      112:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       24:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       16:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       24:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       16:  172:    state->handCount[i] = 0;
       16:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //  {
        -:  177:    //    drawCard(i, state);
        -:  178:    //  }
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      224:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      216:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        8:  188:  state->outpostPlayed = 0;
        8:  189:  state->phase = 0;
        8:  190:  state->numActions = 1;
        8:  191:  state->numBuys = 1;
        8:  192:  state->playedCardCount = 0;
        8:  193:  state->whoseTurn = 0;
        8:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       48:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       40:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        8:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        8:  205:  return 0;
        -:  206:}
        -:  207:
       20:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       20:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       20:  216:  if (state->deckCount[player] < 1)
        4:  217:    return -1;
       16:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      192:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      160:  223:    card = floor(Random() * state->deckCount[player]);
      160:  224:    newDeck[newDeckPos] = state->deck[player][card];
      160:  225:    newDeckPos++;
      560:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      400:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      160:  230:    state->deckCount[player]--;
        -:  231:  }
      176:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      160:  234:    state->deck[player][i] = newDeck[i];
      160:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       16:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
       30:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
       30:  337:  int currentPlayer = whoseTurn(state);
       30:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
        6:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
        6:  349:  int count = 0;
        -:  350:
       36:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
       30:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
       36:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
       30:  359:    if (state->hand[player][i] == card)
        1:  360:      count++;
        -:  361:  }
        -:  362:
        6:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
        6:  369:  return count;
        -:  370:}
        -:  371:
       42:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       42:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
       59:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       59:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
        2:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        2:  630:    state->deckCount[player] = state->discardCount[player];
        2:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        2:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        2:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        2:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        2:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        2:  653:    if (deckCounter == 0)
        2:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       57:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       57:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       57:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       57:  672:    state->deckCount[player]--;
       57:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       57:  676:  return 0;
        -:  677:}
        -:  678:
       28:  679:int getCost(int cardNumber)
        -:  680:{
       28:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        1:  684:    return 0;
        -:  685:  case estate:
        1:  686:    return 2;
        -:  687:  case duchy:
        1:  688:    return 5;
        -:  689:  case province:
        1:  690:    return 8;
        -:  691:  case copper:
        1:  692:    return 0;
        -:  693:  case silver:
        1:  694:    return 3;
        -:  695:  case gold:
        1:  696:    return 6;
        -:  697:  case adventurer:
        1:  698:    return 6;
        -:  699:  case council_room:
        1:  700:    return 5;
        -:  701:  case feast:
        1:  702:    return 4;
        -:  703:  case gardens:
        1:  704:    return 4;
        -:  705:  case mine:
        1:  706:    return 5;
        -:  707:  case remodel:
        1:  708:    return 4;
        -:  709:  case smithy:
        2:  710:    return 4;
        -:  711:  case village:
        1:  712:    return 3;
        -:  713:  case baron:
        1:  714:    return 4;
        -:  715:  case great_hall:
        1:  716:    return 3;
        -:  717:  case minion:
        1:  718:    return 5;
        -:  719:  case steward:
        1:  720:    return 3;
        -:  721:  case tribute:
        1:  722:    return 5;
        -:  723:  case ambassador:
        1:  724:    return 3;
        -:  725:  case cutpurse:
        1:  726:    return 4;
        -:  727:  case embargo:
        1:  728:    return 2;
        -:  729:  case outpost:
        1:  730:    return 5;
        -:  731:  case salvager:
        1:  732:    return 4;
        -:  733:  case sea_hag:
        1:  734:    return 4;
        -:  735:  case treasure_map:
        1:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int gardensEffect()
        -:  743:{
    #####:  744:  return 0;
        -:  745:}
        -:  746:
    #####:  747:int outpostEffect(struct gameState *state, int handPos)
        -:  748:{
        -:  749:  //set outpost flag
    #####:  750:  state->outpostPlayed--;
        -:  751:
        -:  752:  //discard card
    #####:  753:  int currentPlayer = whoseTurn(state);
    #####:  754:  discardCard(handPos, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int great_hallEffect(struct gameState *state, int handPos)
        -:  759:{
    #####:  760:  int currentPlayer = whoseTurn(state);
        -:  761:
        -:  762:  // +1 Card
    #####:  763:  drawCard(currentPlayer, state);
        -:  764:
        -:  765:  //+1 Actions
    #####:  766:  state->numActions++;
        -:  767:
        -:  768:  //discard card from hand
    #####:  769:  discardCard(handPos, currentPlayer, state, 0);
    #####:  770:  return 0;
        -:  771:}
        -:  772:
        1:  773:int smithyEffect(struct gameState *state, int handPos)
        -:  774:{
        1:  775:  int currentPlayer = whoseTurn(state);
        -:  776:
        -:  777:  //+3 Cards
        6:  778:  for (int i = 0; i < 5; i++)
        -:  779:  {
        5:  780:    drawCard(currentPlayer, state);
        -:  781:  }
        -:  782:
        -:  783:  //discard card from hand
        1:  784:  discardCard(handPos, currentPlayer, state, 0);
        1:  785:  return 0;
        -:  786:}
        -:  787:
        2:  788:int adventurerEffect(struct gameState *state)
        -:  789:{
        2:  790:  int currentPlayer = whoseTurn(state);
        2:  791:  int drawntreasure = 0;
        -:  792:  int cardDrawn;
        -:  793:  int temphand[MAX_HAND];
        2:  794:  int z = 0;
        -:  795:
       12:  796:  while (drawntreasure < 3)
        -:  797:  {
        8:  798:    if (state->deckCount[currentPlayer] < 1)
        -:  799:    { //if the deck is empty we need to shuffle discard and add to deck
        2:  800:      shuffle(currentPlayer, state);
        -:  801:    }
        8:  802:    drawCard(currentPlayer, state);
        8:  803:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        8:  804:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        6:  805:      drawntreasure++;
        -:  806:    else
        -:  807:    {
        2:  808:      temphand[z] = cardDrawn;
        2:  809:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  810:      z++;
        -:  811:    }
        -:  812:  }
        6:  813:  while (z - 1 >= 0)
        -:  814:  {
        2:  815:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        2:  816:    z = z - 1;
        -:  817:  }
        2:  818:  return 0;
        -:  819:}
        -:  820:
        5:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
        5:  828:  int currentPlayer = whoseTurn(state);
        5:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
        5:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND]; // moved above the if statement
        -:  833:  //int drawntreasure = 0;
        -:  834:  //int cardDrawn;
        -:  835:  //int z = 0; // this is the counter for the temp hand
        5:  836:  if (nextPlayer > (state->numPlayers - 1))
        -:  837:  {
    #####:  838:    nextPlayer = 0;
        -:  839:  }
        -:  840:
        -:  841:  //uses switch to select card and perform actions
        5:  842:  switch (card)
        -:  843:  {
        -:  844:
        -:  845:  case adventurer:
        2:  846:    return adventurerEffect(state);
        -:  847:
        -:  848:  case council_room:
        -:  849:    //+4 Cards
        5:  850:    for (i = 0; i < 4; i++)
        -:  851:    {
        4:  852:      drawCard(currentPlayer, state);
        -:  853:    }
        -:  854:
        -:  855:    //+1 Buy
        1:  856:    state->numBuys++;
        -:  857:
        -:  858:    //Each other player draws a card
        3:  859:    for (i = 0; i < state->numPlayers; i++)
        -:  860:    {
        2:  861:      if (i != currentPlayer)
        -:  862:      {
        1:  863:        drawCard(i, state);
        -:  864:      }
        -:  865:    }
        -:  866:
        -:  867:    //put played card in played card pile
        1:  868:    discardCard(handPos, currentPlayer, state, 0);
        -:  869:
        1:  870:    return 0;
        -:  871:
        -:  872:  case feast:
        -:  873:    //gain card with cost up to 5
        -:  874:    //Backup hand
    #####:  875:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  876:    {
    #####:  877:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  878:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  879:    }
        -:  880:    //Backup hand
        -:  881:
        -:  882:    //Update Coins for Buy
    #####:  883:    updateCoins(currentPlayer, state, 5);
    #####:  884:    x = 1; //Condition to loop on
    #####:  885:    while (x == 1)
        -:  886:    { //Buy one card
    #####:  887:      if (supplyCount(choice1, state) <= 0)
        -:  888:      {
        -:  889:        if (DEBUG)
        -:  890:          printf("None of that card left, sorry!\n");
        -:  891:
        -:  892:        if (DEBUG)
        -:  893:        {
        -:  894:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  895:        }
        -:  896:      }
    #####:  897:      else if (state->coins < getCost(choice1))
        -:  898:      {
    #####:  899:        printf("That card is too expensive!\n");
        -:  900:
        -:  901:        if (DEBUG)
        -:  902:        {
        -:  903:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  904:        }
        -:  905:      }
        -:  906:      else
        -:  907:      {
        -:  908:
        -:  909:        if (DEBUG)
        -:  910:        {
        -:  911:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  912:        }
        -:  913:
    #####:  914:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  915:        x = 0;                                      //No more buying cards
        -:  916:
        -:  917:        if (DEBUG)
        -:  918:        {
        -:  919:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:        }
        -:  921:      }
        -:  922:    }
        -:  923:
        -:  924:    //Reset Hand
    #####:  925:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  926:    {
    #####:  927:      state->hand[currentPlayer][i] = temphand[i];
    #####:  928:      temphand[i] = -1;
        -:  929:    }
        -:  930:    //Reset Hand
        -:  931:
    #####:  932:    return 0;
        -:  933:
        -:  934:  case gardens:
    #####:  935:    return gardensEffect();
        -:  936:
        -:  937:  case mine:
    #####:  938:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  939:
    #####:  940:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  941:    {
    #####:  942:      return -1;
        -:  943:    }
        -:  944:
    #####:  945:    if (choice2 > treasure_map || choice2 < curse)
        -:  946:    {
    #####:  947:      return -1;
        -:  948:    }
        -:  949:
    #####:  950:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  951:    {
    #####:  952:      return -1;
        -:  953:    }
        -:  954:
    #####:  955:    gainCard(choice2, state, 2, currentPlayer);
        -:  956:
        -:  957:    //discard card from hand
    #####:  958:    discardCard(handPos, currentPlayer, state, 0);
        -:  959:
        -:  960:    //discard trashed card
    #####:  961:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  962:    {
    #####:  963:      if (state->hand[currentPlayer][i] == j)
        -:  964:      {
    #####:  965:        discardCard(i, currentPlayer, state, 0);
    #####:  966:        break;
        -:  967:      }
        -:  968:    }
        -:  969:
    #####:  970:    return 0;
        -:  971:
        -:  972:  case remodel:
    #####:  973:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  974:
    #####:  975:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  976:    {
    #####:  977:      return -1;
        -:  978:    }
        -:  979:
    #####:  980:    gainCard(choice2, state, 0, currentPlayer);
        -:  981:
        -:  982:    //discard card from hand
    #####:  983:    discardCard(handPos, currentPlayer, state, 0);
        -:  984:
        -:  985:    //discard trashed card
    #####:  986:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:    {
    #####:  988:      if (state->hand[currentPlayer][i] == j)
        -:  989:      {
    #####:  990:        discardCard(i, currentPlayer, state, 0);
    #####:  991:        break;
        -:  992:      }
        -:  993:    }
        -:  994:
    #####:  995:    return 0;
        -:  996:
        -:  997:  case smithy:
        1:  998:    return smithyEffect(state, handPos);
        -:  999:
        -: 1000:  case village:
        -: 1001:    //+1 Card
        1: 1002:    drawCard(currentPlayer, state);
        -: 1003:
        -: 1004:    //+2 Actions
        1: 1005:    state->numActions = state->numActions + 2;
        -: 1006:
        -: 1007:    //discard played card from hand
        1: 1008:    discardCard(handPos, currentPlayer, state, 0);
        1: 1009:    return 0;
        -: 1010:
        -: 1011:  case baron:
    #####: 1012:    state->numBuys++; //Increase buys by 1!
    #####: 1013:    if (choice1 > 0)
        -: 1014:    {                             //Boolean true or going to discard an estate
    #####: 1015:      int p = 0;                  //Iterator for hand!
    #####: 1016:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1017:      while (card_not_discarded)
        -: 1018:      {
    #####: 1019:        if (state->hand[currentPlayer][p] == estate)
        -: 1020:        {                    //Found an estate card!
    #####: 1021:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1022:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1023:          state->discardCount[currentPlayer]++;
    #####: 1024:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1025:          {
    #####: 1026:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1027:          }
    #####: 1028:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1029:          state->handCount[currentPlayer]--;
    #####: 1030:          card_not_discarded = 0; //Exit the loop
        -: 1031:        }
    #####: 1032:        else if (p > state->handCount[currentPlayer])
        -: 1033:        {
        -: 1034:          if (DEBUG)
        -: 1035:          {
        -: 1036:            printf("No estate cards in your hand, invalid choice\n");
        -: 1037:            printf("Must gain an estate if there are any\n");
        -: 1038:          }
    #####: 1039:          if (supplyCount(estate, state) > 0)
        -: 1040:          {
    #####: 1041:            gainCard(estate, state, 0, currentPlayer);
    #####: 1042:            state->supplyCount[estate]--; //Decrement estates
    #####: 1043:            if (supplyCount(estate, state) == 0)
        -: 1044:            {
    #####: 1045:              isGameOver(state);
        -: 1046:            }
        -: 1047:          }
    #####: 1048:          card_not_discarded = 0; //Exit the loop
        -: 1049:        }
        -: 1050:
        -: 1051:        else
        -: 1052:        {
    #####: 1053:          p++; //Next card
        -: 1054:        }
        -: 1055:      }
        -: 1056:    }
        -: 1057:
        -: 1058:    else
        -: 1059:    {
    #####: 1060:      if (supplyCount(estate, state) > 0)
        -: 1061:      {
    #####: 1062:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1063:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1064:        if (supplyCount(estate, state) == 0)
        -: 1065:        {
    #####: 1066:          isGameOver(state);
        -: 1067:        }
        -: 1068:      }
        -: 1069:    }
        -: 1070:
    #####: 1071:    return 0;
        -: 1072:
        -: 1073:  case great_hall:
    #####: 1074:    return great_hallEffect(state, handPos);
        -: 1075:
        -: 1076:  case minion:
        -: 1077:    //+1 action
    #####: 1078:    state->numActions++;
        -: 1079:
        -: 1080:    //discard card from hand
    #####: 1081:    discardCard(handPos, currentPlayer, state, 0);
        -: 1082:
    #####: 1083:    if (choice1) //+2 coins
        -: 1084:    {
    #####: 1085:      state->coins = state->coins + 2;
        -: 1086:    }
        -: 1087:
    #####: 1088:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1089:    {
        -: 1090:      //discard hand
    #####: 1091:      while (numHandCards(state) > 0)
        -: 1092:      {
    #####: 1093:        discardCard(handPos, currentPlayer, state, 0);
        -: 1094:      }
        -: 1095:
        -: 1096:      //draw 4
    #####: 1097:      for (i = 0; i < 4; i++)
        -: 1098:      {
    #####: 1099:        drawCard(currentPlayer, state);
        -: 1100:      }
        -: 1101:
        -: 1102:      //other players discard hand and redraw if hand size > 4
    #####: 1103:      for (i = 0; i < state->numPlayers; i++)
        -: 1104:      {
    #####: 1105:        if (i != currentPlayer)
        -: 1106:        {
    #####: 1107:          if (state->handCount[i] > 4)
        -: 1108:          {
        -: 1109:            //discard hand
    #####: 1110:            while (state->handCount[i] > 0)
        -: 1111:            {
    #####: 1112:              discardCard(handPos, i, state, 0);
        -: 1113:            }
        -: 1114:
        -: 1115:            //draw 4
    #####: 1116:            for (j = 0; j < 4; j++)
        -: 1117:            {
    #####: 1118:              drawCard(i, state);
        -: 1119:            }
        -: 1120:          }
        -: 1121:        }
        -: 1122:      }
        -: 1123:    }
    #####: 1124:    return 0;
        -: 1125:
        -: 1126:  case steward:
    #####: 1127:    if (choice1 == 1)
        -: 1128:    {
        -: 1129:      //+2 cards
    #####: 1130:      drawCard(currentPlayer, state);
    #####: 1131:      drawCard(currentPlayer, state);
        -: 1132:    }
    #####: 1133:    else if (choice1 == 2)
        -: 1134:    {
        -: 1135:      //+2 coins
    #####: 1136:      state->coins = state->coins + 2;
        -: 1137:    }
        -: 1138:    else
        -: 1139:    {
        -: 1140:      //trash 2 cards in hand
    #####: 1141:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1142:      discardCard(choice3, currentPlayer, state, 1);
        -: 1143:    }
        -: 1144:
        -: 1145:    //discard card from hand
    #####: 1146:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case tribute:
    #####: 1150:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1151:    {
    #####: 1152:      if (state->deckCount[nextPlayer] > 0)
        -: 1153:      {
    #####: 1154:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1155:        state->deckCount[nextPlayer]--;
        -: 1156:      }
    #####: 1157:      else if (state->discardCount[nextPlayer] > 0)
        -: 1158:      {
    #####: 1159:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1160:        state->discardCount[nextPlayer]--;
        -: 1161:      }
        -: 1162:      else
        -: 1163:      {
        -: 1164:        //No Card to Reveal
        -: 1165:        if (DEBUG)
        -: 1166:        {
        -: 1167:          printf("No cards to reveal\n");
        -: 1168:        }
        -: 1169:      }
        -: 1170:    }
        -: 1171:
        -: 1172:    else
        -: 1173:    {
    #####: 1174:      if (state->deckCount[nextPlayer] == 0)
        -: 1175:      {
    #####: 1176:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1177:        {
    #####: 1178:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1179:          state->deckCount[nextPlayer]++;
    #####: 1180:          state->discard[nextPlayer][i] = -1;
    #####: 1181:          state->discardCount[nextPlayer]--;
        -: 1182:        }
        -: 1183:
    #####: 1184:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1185:      }
    #####: 1186:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1187:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1188:      state->deckCount[nextPlayer]--;
    #####: 1189:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
        -: 1192:    }
        -: 1193:
    #####: 1194:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1195:    { //If we have a duplicate card, just drop one
    #####: 1196:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1197:      state->playedCardCount++;
    #####: 1198:      tributeRevealedCards[1] = -1;
        -: 1199:    }
        -: 1200:
    #####: 1201:    for (i = 0; i <= 2; i++)
        -: 1202:    {
    #####: 1203:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1204:      { //Treasure cards
    #####: 1205:        state->coins += 2;
        -: 1206:      }
        -: 1207:
    #####: 1208:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1209:      { //Victory Card Found
    #####: 1210:        drawCard(currentPlayer, state);
    #####: 1211:        drawCard(currentPlayer, state);
        -: 1212:      }
        -: 1213:      else
        -: 1214:      { //Action Card
    #####: 1215:        state->numActions = state->numActions + 2;
        -: 1216:      }
        -: 1217:    }
        -: 1218:
    #####: 1219:    return 0;
        -: 1220:
        -: 1221:  case ambassador:
    #####: 1222:    j = 0; //used to check if player has enough cards to discard
        -: 1223:
    #####: 1224:    if (choice2 > 2 || choice2 < 0)
        -: 1225:    {
    #####: 1226:      return -1;
        -: 1227:    }
        -: 1228:
    #####: 1229:    if (choice1 == handPos)
        -: 1230:    {
    #####: 1231:      return -1;
        -: 1232:    }
        -: 1233:
    #####: 1234:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:    {
    #####: 1236:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1237:      {
    #####: 1238:        j++;
        -: 1239:      }
        -: 1240:    }
    #####: 1241:    if (j < choice2)
        -: 1242:    {
    #####: 1243:      return -1;
        -: 1244:    }
        -: 1245:
        -: 1246:    if (DEBUG)
        -: 1247:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1248:
        -: 1249:    //increase supply count for choosen card by amount being discarded
    #####: 1250:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1251:
        -: 1252:    //each other player gains a copy of revealed card
    #####: 1253:    for (i = 0; i < state->numPlayers; i++)
        -: 1254:    {
    #####: 1255:      if (i != currentPlayer)
        -: 1256:      {
    #####: 1257:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1258:      }
        -: 1259:    }
        -: 1260:
        -: 1261:    //discard played card from hand
    #####: 1262:    discardCard(handPos, currentPlayer, state, 0);
        -: 1263:
        -: 1264:    //trash copies of cards returned to supply
    #####: 1265:    for (j = 0; j < choice2; j++)
        -: 1266:    {
    #####: 1267:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1268:      {
    #####: 1269:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1270:        {
    #####: 1271:          discardCard(i, currentPlayer, state, 1);
    #####: 1272:          break;
        -: 1273:        }
        -: 1274:      }
        -: 1275:    }
        -: 1276:
    #####: 1277:    return 0;
        -: 1278:
        -: 1279:  case cutpurse:
        -: 1280:
    #####: 1281:    updateCoins(currentPlayer, state, 2);
    #####: 1282:    for (i = 0; i < state->numPlayers; i++)
        -: 1283:    {
    #####: 1284:      if (i != currentPlayer)
        -: 1285:      {
    #####: 1286:        for (j = 0; j < state->handCount[i]; j++)
        -: 1287:        {
    #####: 1288:          if (state->hand[i][j] == copper)
        -: 1289:          {
    #####: 1290:            discardCard(j, i, state, 0);
    #####: 1291:            break;
        -: 1292:          }
    #####: 1293:          if (j == state->handCount[i])
        -: 1294:          {
    #####: 1295:            for (k = 0; k < state->handCount[i]; k++)
        -: 1296:            {
        -: 1297:              if (DEBUG)
        -: 1298:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1299:            }
    #####: 1300:            break;
        -: 1301:          }
        -: 1302:        }
        -: 1303:      }
        -: 1304:    }
        -: 1305:
        -: 1306:    //discard played card from hand
    #####: 1307:    discardCard(handPos, currentPlayer, state, 0);
        -: 1308:
    #####: 1309:    return 0;
        -: 1310:
        -: 1311:  case embargo:
        -: 1312:    //+2 Coins
    #####: 1313:    state->coins = state->coins + 2;
        -: 1314:
        -: 1315:    //see if selected pile is in play
    #####: 1316:    if (state->supplyCount[choice1] == -1)
        -: 1317:    {
    #####: 1318:      return -1;
        -: 1319:    }
        -: 1320:
        -: 1321:    //add embargo token to selected supply pile
    #####: 1322:    state->embargoTokens[choice1]++;
        -: 1323:
        -: 1324:    //trash card
    #####: 1325:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1326:    return 0;
        -: 1327:
        -: 1328:  case outpost:
    #####: 1329:    return outpostEffect(state, handPos);
        -: 1330:
        -: 1331:  case salvager:
        -: 1332:    //+1 buy
    #####: 1333:    state->numBuys++;
        -: 1334:
    #####: 1335:    if (choice1)
        -: 1336:    {
        -: 1337:      //gain coins equal to trashed card
    #####: 1338:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1339:      //trash card
    #####: 1340:      discardCard(choice1, currentPlayer, state, 1);
        -: 1341:    }
        -: 1342:
        -: 1343:    //discard card
    #####: 1344:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1345:    return 0;
        -: 1346:
        -: 1347:  case sea_hag:
    #####: 1348:    for (i = 0; i < state->numPlayers; i++)
        -: 1349:    {
    #####: 1350:      if (i != currentPlayer)
        -: 1351:      {
    #####: 1352:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1353:        state->deckCount[i]--;
    #####: 1354:        state->discardCount[i]++;
    #####: 1355:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1356:      }
        -: 1357:    }
    #####: 1358:    return 0;
        -: 1359:
        -: 1360:  case treasure_map:
        -: 1361:    //search hand for another treasure_map
    #####: 1362:    index = -1;
    #####: 1363:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1364:    {
    #####: 1365:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1366:      {
    #####: 1367:        index = i;
    #####: 1368:        break;
        -: 1369:      }
        -: 1370:    }
    #####: 1371:    if (index > -1)
        -: 1372:    {
        -: 1373:      //trash both treasure cards
    #####: 1374:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1375:      discardCard(index, currentPlayer, state, 1);
        -: 1376:
        -: 1377:      //gain 4 Gold cards
    #####: 1378:      for (i = 0; i < 4; i++)
        -: 1379:      {
    #####: 1380:        gainCard(gold, state, 1, currentPlayer);
        -: 1381:      }
        -: 1382:
        -: 1383:      //return success
    #####: 1384:      return 1;
        -: 1385:    }
        -: 1386:
        -: 1387:    //no second treasure_map found in hand
    #####: 1388:    return -1;
        -: 1389:  }
        -: 1390:
    #####: 1391:  return -1;
        -: 1392:}
        -: 1393:
        3: 1394:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1395:{
        -: 1396:
        -: 1397:  //if card is not trashed, added to Played pile
        3: 1398:  if (trashFlag < 1)
        -: 1399:  {
        -: 1400:    //add card to played pile
        3: 1401:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1402:    state->playedCardCount++;
        -: 1403:  }
        -: 1404:
        -: 1405:  //set played card to -1
        3: 1406:  state->hand[currentPlayer][handPos] = -1;
        -: 1407:
        -: 1408:  //remove card from player's hand
        3: 1409:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1410:  {
        -: 1411:    //reduce number of cards in hand
    #####: 1412:    state->handCount[currentPlayer]--;
        -: 1413:  }
        3: 1414:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1415:  {
        -: 1416:    //reduce number of cards in hand
    #####: 1417:    state->handCount[currentPlayer]--;
        -: 1418:  }
        -: 1419:  else
        -: 1420:  {
        -: 1421:    //replace discarded card with last card in hand
        3: 1422:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1423:    //set last card to -1
        3: 1424:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1425:    //reduce number of cards in hand
        3: 1426:    state->handCount[currentPlayer]--;
        -: 1427:  }
        -: 1428:
        3: 1429:  return 0;
        -: 1430:}
        -: 1431:
    #####: 1432:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1433:{
        -: 1434:  //Note: supplyPos is enum of choosen card
        -: 1435:
        -: 1436:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1437:  if (supplyCount(supplyPos, state) < 1)
        -: 1438:  {
    #####: 1439:    return -1;
        -: 1440:  }
        -: 1441:
        -: 1442:  //added card for [whoseTurn] current player:
        -: 1443:  // toFlag = 0 : add to discard
        -: 1444:  // toFlag = 1 : add to deck
        -: 1445:  // toFlag = 2 : add to hand
        -: 1446:
    #####: 1447:  if (toFlag == 1)
        -: 1448:  {
    #####: 1449:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1450:    state->deckCount[player]++;
        -: 1451:  }
    #####: 1452:  else if (toFlag == 2)
        -: 1453:  {
    #####: 1454:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1455:    state->handCount[player]++;
        -: 1456:  }
        -: 1457:  else
        -: 1458:  {
    #####: 1459:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1460:    state->discardCount[player]++;
        -: 1461:  }
        -: 1462:
        -: 1463:  //decrease number in supply pile
    #####: 1464:  state->supplyCount[supplyPos]--;
        -: 1465:
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        8: 1469:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1470:{
        -: 1471:  int i;
        -: 1472:
        -: 1473:  //reset coin count
        8: 1474:  state->coins = 0;
        -: 1475:
        -: 1476:  //add coins for each Treasure card in player's hand
       48: 1477:  for (i = 0; i < state->handCount[player]; i++)
        -: 1478:  {
       40: 1479:    if (state->hand[player][i] == copper)
        -: 1480:    {
       32: 1481:      state->coins += 1;
        -: 1482:    }
        8: 1483:    else if (state->hand[player][i] == silver)
        -: 1484:    {
    #####: 1485:      state->coins += 2;
        -: 1486:    }
        8: 1487:    else if (state->hand[player][i] == gold)
        -: 1488:    {
    #####: 1489:      state->coins += 3;
        -: 1490:    }
        -: 1491:  }
        -: 1492:
        -: 1493:  //add bonus
        8: 1494:  state->coins += bonus;
        -: 1495:
        8: 1496:  return 0;
        -: 1497:}
        -: 1498:
        -: 1499://end of dominion.c
File 'dominion.c'
Lines executed:33.73% of 584
Branches executed:37.65% of 417
Taken at least once:28.54% of 417
Calls executed:23.23% of 99
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 240 returned 100% blocks executed 83%
      240:    8:int compare(const void *a, const void *b)
        -:    9:{
      240:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   11:    return 1;
      240:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       64:   13:    return -1;
      176:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        8:   48:  SelectStream(1);
call    0 returned 100%
        8:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
        8:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        8:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       88:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
      880:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
      800:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        8:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
        8:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        8:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
        8:   92:    state->supplyCount[estate] = 8;
        8:   93:    state->supplyCount[duchy] = 8;
        8:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        8:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  105:  state->supplyCount[silver] = 40;
        8:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      168:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
     1320:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
     1240:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       80:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  117:        {
       16:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
        8:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
       72:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       80:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1160:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       24:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
       16:  146:    state->deckCount[i] = 0;
       64:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
       48:  149:      state->deck[i][j] = estate;
       48:  150:      state->deckCount[i]++;
        -:  151:    }
      128:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
      112:  154:      state->deck[i][j] = copper;
      112:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       24:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
       16:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       24:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       16:  172:    state->handCount[i] = 0;
       16:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //  {
        -:  177:    //    drawCard(i, state);
        -:  178:    //  }
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      224:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
      216:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        8:  188:  state->outpostPlayed = 0;
        8:  189:  state->phase = 0;
        8:  190:  state->numActions = 1;
        8:  191:  state->numBuys = 1;
        8:  192:  state->playedCardCount = 0;
        8:  193:  state->whoseTurn = 0;
        8:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       48:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
       40:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
        8:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
        8:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 20 returned 100% blocks executed 100%
       20:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       20:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       20:  216:  if (state->deckCount[player] < 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        4:  217:    return -1;
       16:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      192:  221:  while (state->deckCount[player] > 0)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  222:  {
      160:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      160:  224:    newDeck[newDeckPos] = state->deck[player][card];
      160:  225:    newDeckPos++;
      560:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  227:    {
      400:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      160:  230:    state->deckCount[player]--;
        -:  231:  }
      176:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  233:  {
      160:  234:    state->deck[player][i] = newDeck[i];
      160:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       16:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
branch  0 never executed
branch  1 never executed
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 30 returned 100% blocks executed 100%
       30:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
       30:  337:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       30:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 6 returned 100% blocks executed 76%
        6:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
        6:  349:  int count = 0;
        -:  350:
       36:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  352:  {
       30:  353:    if (state->deck[player][i] == card)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  354:      count++;
        -:  355:  }
        -:  356:
       36:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  358:  {
       30:  359:    if (state->hand[player][i] == card)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        1:  360:      count++;
        -:  361:  }
        -:  362:
        6:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
        6:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 42 returned 100% blocks executed 100%
       42:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       42:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 59 returned 100% blocks executed 85%
       59:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       59:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
        2:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        2:  630:    state->deckCount[player] = state->discardCount[player];
        2:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        2:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        2:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        2:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        2:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        2:  653:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       57:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       57:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       57:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       57:  672:    state->deckCount[player]--;
       57:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       57:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 28 returned 100% blocks executed 97%
       28:  679:int getCost(int cardNumber)
        -:  680:{
       28:  681:  switch (cardNumber)
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 7%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  682:  {
        -:  683:  case curse:
        1:  684:    return 0;
        -:  685:  case estate:
        1:  686:    return 2;
        -:  687:  case duchy:
        1:  688:    return 5;
        -:  689:  case province:
        1:  690:    return 8;
        -:  691:  case copper:
        1:  692:    return 0;
        -:  693:  case silver:
        1:  694:    return 3;
        -:  695:  case gold:
        1:  696:    return 6;
        -:  697:  case adventurer:
        1:  698:    return 6;
        -:  699:  case council_room:
        1:  700:    return 5;
        -:  701:  case feast:
        1:  702:    return 4;
        -:  703:  case gardens:
        1:  704:    return 4;
        -:  705:  case mine:
        1:  706:    return 5;
        -:  707:  case remodel:
        1:  708:    return 4;
        -:  709:  case smithy:
        2:  710:    return 4;
        -:  711:  case village:
        1:  712:    return 3;
        -:  713:  case baron:
        1:  714:    return 4;
        -:  715:  case great_hall:
        1:  716:    return 3;
        -:  717:  case minion:
        1:  718:    return 5;
        -:  719:  case steward:
        1:  720:    return 3;
        -:  721:  case tribute:
        1:  722:    return 5;
        -:  723:  case ambassador:
        1:  724:    return 3;
        -:  725:  case cutpurse:
        1:  726:    return 4;
        -:  727:  case embargo:
        1:  728:    return 2;
        -:  729:  case outpost:
        1:  730:    return 5;
        -:  731:  case salvager:
        1:  732:    return 4;
        -:  733:  case sea_hag:
        1:  734:    return 4;
        -:  735:  case treasure_map:
        1:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function gardensEffect called 0 returned 0% blocks executed 0%
    #####:  742:int gardensEffect()
        -:  743:{
    #####:  744:  return 0;
        -:  745:}
        -:  746:
function outpostEffect called 0 returned 0% blocks executed 0%
    #####:  747:int outpostEffect(struct gameState *state, int handPos)
        -:  748:{
        -:  749:  //set outpost flag
    #####:  750:  state->outpostPlayed--;
        -:  751:
        -:  752:  //discard card
    #####:  753:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  754:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  755:  return 0;
        -:  756:}
        -:  757:
function great_hallEffect called 0 returned 0% blocks executed 0%
    #####:  758:int great_hallEffect(struct gameState *state, int handPos)
        -:  759:{
    #####:  760:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  761:
        -:  762:  // +1 Card
    #####:  763:  drawCard(currentPlayer, state);
call    0 never executed
        -:  764:
        -:  765:  //+1 Actions
    #####:  766:  state->numActions++;
        -:  767:
        -:  768:  //discard card from hand
    #####:  769:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  770:  return 0;
        -:  771:}
        -:  772:
function smithyEffect called 1 returned 100% blocks executed 100%
        1:  773:int smithyEffect(struct gameState *state, int handPos)
        -:  774:{
        1:  775:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  776:
        -:  777:  //+3 Cards
        6:  778:  for (int i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  779:  {
        5:  780:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  781:  }
        -:  782:
        -:  783:  //discard card from hand
        1:  784:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  785:  return 0;
        -:  786:}
        -:  787:
function adventurerEffect called 2 returned 100% blocks executed 100%
        2:  788:int adventurerEffect(struct gameState *state)
        -:  789:{
        2:  790:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  791:  int drawntreasure = 0;
        -:  792:  int cardDrawn;
        -:  793:  int temphand[MAX_HAND];
        2:  794:  int z = 0;
        -:  795:
       12:  796:  while (drawntreasure < 3)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  797:  {
        8:  798:    if (state->deckCount[currentPlayer] < 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  799:    { //if the deck is empty we need to shuffle discard and add to deck
        2:  800:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  801:    }
        8:  802:    drawCard(currentPlayer, state);
call    0 returned 100%
        8:  803:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        8:  804:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6:  805:      drawntreasure++;
        -:  806:    else
        -:  807:    {
        2:  808:      temphand[z] = cardDrawn;
        2:  809:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  810:      z++;
        -:  811:    }
        -:  812:  }
        6:  813:  while (z - 1 >= 0)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  814:  {
        2:  815:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        2:  816:    z = z - 1;
        -:  817:  }
        2:  818:  return 0;
        -:  819:}
        -:  820:
function cardEffect called 5 returned 100% blocks executed 9%
        5:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
        5:  828:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
        5:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND]; // moved above the if statement
        -:  833:  //int drawntreasure = 0;
        -:  834:  //int cardDrawn;
        -:  835:  //int z = 0; // this is the counter for the temp hand
        5:  836:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  837:  {
    #####:  838:    nextPlayer = 0;
        -:  839:  }
        -:  840:
        -:  841:  //uses switch to select card and perform actions
        5:  842:  switch (card)
branch  0 taken 40%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 20%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  843:  {
        -:  844:
        -:  845:  case adventurer:
        2:  846:    return adventurerEffect(state);
call    0 returned 100%
        -:  847:
        -:  848:  case council_room:
        -:  849:    //+4 Cards
        5:  850:    for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  851:    {
        4:  852:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  853:    }
        -:  854:
        -:  855:    //+1 Buy
        1:  856:    state->numBuys++;
        -:  857:
        -:  858:    //Each other player draws a card
        3:  859:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  860:    {
        2:  861:      if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  862:      {
        1:  863:        drawCard(i, state);
call    0 returned 100%
        -:  864:      }
        -:  865:    }
        -:  866:
        -:  867:    //put played card in played card pile
        1:  868:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  869:
        1:  870:    return 0;
        -:  871:
        -:  872:  case feast:
        -:  873:    //gain card with cost up to 5
        -:  874:    //Backup hand
    #####:  875:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  876:    {
    #####:  877:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  878:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  879:    }
        -:  880:    //Backup hand
        -:  881:
        -:  882:    //Update Coins for Buy
    #####:  883:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  884:    x = 1; //Condition to loop on
    #####:  885:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  886:    { //Buy one card
    #####:  887:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  888:      {
        -:  889:        if (DEBUG)
        -:  890:          printf("None of that card left, sorry!\n");
        -:  891:
        -:  892:        if (DEBUG)
        -:  893:        {
        -:  894:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  895:        }
        -:  896:      }
    #####:  897:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  898:      {
    #####:  899:        printf("That card is too expensive!\n");
call    0 never executed
        -:  900:
        -:  901:        if (DEBUG)
        -:  902:        {
        -:  903:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  904:        }
        -:  905:      }
        -:  906:      else
        -:  907:      {
        -:  908:
        -:  909:        if (DEBUG)
        -:  910:        {
        -:  911:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  912:        }
        -:  913:
    #####:  914:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  915:        x = 0;                                      //No more buying cards
        -:  916:
        -:  917:        if (DEBUG)
        -:  918:        {
        -:  919:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:        }
        -:  921:      }
        -:  922:    }
        -:  923:
        -:  924:    //Reset Hand
    #####:  925:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  926:    {
    #####:  927:      state->hand[currentPlayer][i] = temphand[i];
    #####:  928:      temphand[i] = -1;
        -:  929:    }
        -:  930:    //Reset Hand
        -:  931:
    #####:  932:    return 0;
        -:  933:
        -:  934:  case gardens:
    #####:  935:    return gardensEffect();
call    0 never executed
        -:  936:
        -:  937:  case mine:
    #####:  938:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  939:
    #####:  940:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  941:    {
    #####:  942:      return -1;
        -:  943:    }
        -:  944:
    #####:  945:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  946:    {
    #####:  947:      return -1;
        -:  948:    }
        -:  949:
    #####:  950:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  951:    {
    #####:  952:      return -1;
        -:  953:    }
        -:  954:
    #####:  955:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  956:
        -:  957:    //discard card from hand
    #####:  958:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  959:
        -:  960:    //discard trashed card
    #####:  961:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  962:    {
    #####:  963:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  964:      {
    #####:  965:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  966:        break;
        -:  967:      }
        -:  968:    }
        -:  969:
    #####:  970:    return 0;
        -:  971:
        -:  972:  case remodel:
    #####:  973:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  974:
    #####:  975:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  976:    {
    #####:  977:      return -1;
        -:  978:    }
        -:  979:
    #####:  980:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  981:
        -:  982:    //discard card from hand
    #####:  983:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:
        -:  985:    //discard trashed card
    #####:  986:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  987:    {
    #####:  988:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  989:      {
    #####:  990:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  991:        break;
        -:  992:      }
        -:  993:    }
        -:  994:
    #####:  995:    return 0;
        -:  996:
        -:  997:  case smithy:
        1:  998:    return smithyEffect(state, handPos);
call    0 returned 100%
        -:  999:
        -: 1000:  case village:
        -: 1001:    //+1 Card
        1: 1002:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1003:
        -: 1004:    //+2 Actions
        1: 1005:    state->numActions = state->numActions + 2;
        -: 1006:
        -: 1007:    //discard played card from hand
        1: 1008:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1009:    return 0;
        -: 1010:
        -: 1011:  case baron:
    #####: 1012:    state->numBuys++; //Increase buys by 1!
    #####: 1013:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1014:    {                             //Boolean true or going to discard an estate
    #####: 1015:      int p = 0;                  //Iterator for hand!
    #####: 1016:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1017:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1018:      {
    #####: 1019:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1020:        {                    //Found an estate card!
    #####: 1021:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1022:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1023:          state->discardCount[currentPlayer]++;
    #####: 1024:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1025:          {
    #####: 1026:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1027:          }
    #####: 1028:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1029:          state->handCount[currentPlayer]--;
    #####: 1030:          card_not_discarded = 0; //Exit the loop
        -: 1031:        }
    #####: 1032:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1033:        {
        -: 1034:          if (DEBUG)
        -: 1035:          {
        -: 1036:            printf("No estate cards in your hand, invalid choice\n");
        -: 1037:            printf("Must gain an estate if there are any\n");
        -: 1038:          }
    #####: 1039:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1040:          {
    #####: 1041:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1042:            state->supplyCount[estate]--; //Decrement estates
    #####: 1043:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1044:            {
    #####: 1045:              isGameOver(state);
call    0 never executed
        -: 1046:            }
        -: 1047:          }
    #####: 1048:          card_not_discarded = 0; //Exit the loop
        -: 1049:        }
        -: 1050:
        -: 1051:        else
        -: 1052:        {
    #####: 1053:          p++; //Next card
        -: 1054:        }
        -: 1055:      }
        -: 1056:    }
        -: 1057:
        -: 1058:    else
        -: 1059:    {
    #####: 1060:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1061:      {
    #####: 1062:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####: 1063:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1064:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1065:        {
    #####: 1066:          isGameOver(state);
call    0 never executed
        -: 1067:        }
        -: 1068:      }
        -: 1069:    }
        -: 1070:
    #####: 1071:    return 0;
        -: 1072:
        -: 1073:  case great_hall:
    #####: 1074:    return great_hallEffect(state, handPos);
call    0 never executed
        -: 1075:
        -: 1076:  case minion:
        -: 1077:    //+1 action
    #####: 1078:    state->numActions++;
        -: 1079:
        -: 1080:    //discard card from hand
    #####: 1081:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1082:
    #####: 1083:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1084:    {
    #####: 1085:      state->coins = state->coins + 2;
        -: 1086:    }
        -: 1087:
    #####: 1088:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1089:    {
        -: 1090:      //discard hand
    #####: 1091:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1092:      {
    #####: 1093:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1094:      }
        -: 1095:
        -: 1096:      //draw 4
    #####: 1097:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1098:      {
    #####: 1099:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:      }
        -: 1101:
        -: 1102:      //other players discard hand and redraw if hand size > 4
    #####: 1103:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:      {
    #####: 1105:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1106:        {
    #####: 1107:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1108:          {
        -: 1109:            //discard hand
    #####: 1110:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1111:            {
    #####: 1112:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1113:            }
        -: 1114:
        -: 1115:            //draw 4
    #####: 1116:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1117:            {
    #####: 1118:              drawCard(i, state);
call    0 never executed
        -: 1119:            }
        -: 1120:          }
        -: 1121:        }
        -: 1122:      }
        -: 1123:    }
    #####: 1124:    return 0;
        -: 1125:
        -: 1126:  case steward:
    #####: 1127:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1128:    {
        -: 1129:      //+2 cards
    #####: 1130:      drawCard(currentPlayer, state);
call    0 never executed
    #####: 1131:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1132:    }
    #####: 1133:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1134:    {
        -: 1135:      //+2 coins
    #####: 1136:      state->coins = state->coins + 2;
        -: 1137:    }
        -: 1138:    else
        -: 1139:    {
        -: 1140:      //trash 2 cards in hand
    #####: 1141:      discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1142:      discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1143:    }
        -: 1144:
        -: 1145:    //discard card from hand
    #####: 1146:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case tribute:
    #####: 1150:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1151:    {
    #####: 1152:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1153:      {
    #####: 1154:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1155:        state->deckCount[nextPlayer]--;
        -: 1156:      }
    #####: 1157:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1158:      {
    #####: 1159:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1160:        state->discardCount[nextPlayer]--;
        -: 1161:      }
        -: 1162:      else
        -: 1163:      {
        -: 1164:        //No Card to Reveal
        -: 1165:        if (DEBUG)
        -: 1166:        {
        -: 1167:          printf("No cards to reveal\n");
        -: 1168:        }
        -: 1169:      }
        -: 1170:    }
        -: 1171:
        -: 1172:    else
        -: 1173:    {
    #####: 1174:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1175:      {
    #####: 1176:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1177:        {
    #####: 1178:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1179:          state->deckCount[nextPlayer]++;
    #####: 1180:          state->discard[nextPlayer][i] = -1;
    #####: 1181:          state->discardCount[nextPlayer]--;
        -: 1182:        }
        -: 1183:
    #####: 1184:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1185:      }
    #####: 1186:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1187:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1188:      state->deckCount[nextPlayer]--;
    #####: 1189:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
        -: 1192:    }
        -: 1193:
    #####: 1194:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1195:    { //If we have a duplicate card, just drop one
    #####: 1196:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1197:      state->playedCardCount++;
    #####: 1198:      tributeRevealedCards[1] = -1;
        -: 1199:    }
        -: 1200:
    #####: 1201:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1202:    {
    #####: 1203:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1204:      { //Treasure cards
    #####: 1205:        state->coins += 2;
        -: 1206:      }
        -: 1207:
    #####: 1208:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1209:      { //Victory Card Found
    #####: 1210:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1211:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1212:      }
        -: 1213:      else
        -: 1214:      { //Action Card
    #####: 1215:        state->numActions = state->numActions + 2;
        -: 1216:      }
        -: 1217:    }
        -: 1218:
    #####: 1219:    return 0;
        -: 1220:
        -: 1221:  case ambassador:
    #####: 1222:    j = 0; //used to check if player has enough cards to discard
        -: 1223:
    #####: 1224:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:    {
    #####: 1226:      return -1;
        -: 1227:    }
        -: 1228:
    #####: 1229:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1230:    {
    #####: 1231:      return -1;
        -: 1232:    }
        -: 1233:
    #####: 1234:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:    {
    #####: 1236:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1237:      {
    #####: 1238:        j++;
        -: 1239:      }
        -: 1240:    }
    #####: 1241:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1242:    {
    #####: 1243:      return -1;
        -: 1244:    }
        -: 1245:
        -: 1246:    if (DEBUG)
        -: 1247:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1248:
        -: 1249:    //increase supply count for choosen card by amount being discarded
    #####: 1250:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1251:
        -: 1252:    //each other player gains a copy of revealed card
    #####: 1253:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1254:    {
    #####: 1255:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1256:      {
    #####: 1257:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1258:      }
        -: 1259:    }
        -: 1260:
        -: 1261:    //discard played card from hand
    #####: 1262:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1263:
        -: 1264:    //trash copies of cards returned to supply
    #####: 1265:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1266:    {
    #####: 1267:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:      {
    #####: 1269:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1270:        {
    #####: 1271:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1272:          break;
        -: 1273:        }
        -: 1274:      }
        -: 1275:    }
        -: 1276:
    #####: 1277:    return 0;
        -: 1278:
        -: 1279:  case cutpurse:
        -: 1280:
    #####: 1281:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1282:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:    {
    #####: 1284:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1285:      {
    #####: 1286:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1287:        {
    #####: 1288:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1289:          {
    #####: 1290:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1291:            break;
        -: 1292:          }
    #####: 1293:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1294:          {
    #####: 1295:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1296:            {
        -: 1297:              if (DEBUG)
        -: 1298:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1299:            }
    #####: 1300:            break;
        -: 1301:          }
        -: 1302:        }
        -: 1303:      }
        -: 1304:    }
        -: 1305:
        -: 1306:    //discard played card from hand
    #####: 1307:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1308:
    #####: 1309:    return 0;
        -: 1310:
        -: 1311:  case embargo:
        -: 1312:    //+2 Coins
    #####: 1313:    state->coins = state->coins + 2;
        -: 1314:
        -: 1315:    //see if selected pile is in play
    #####: 1316:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1317:    {
    #####: 1318:      return -1;
        -: 1319:    }
        -: 1320:
        -: 1321:    //add embargo token to selected supply pile
    #####: 1322:    state->embargoTokens[choice1]++;
        -: 1323:
        -: 1324:    //trash card
    #####: 1325:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1326:    return 0;
        -: 1327:
        -: 1328:  case outpost:
    #####: 1329:    return outpostEffect(state, handPos);
call    0 never executed
        -: 1330:
        -: 1331:  case salvager:
        -: 1332:    //+1 buy
    #####: 1333:    state->numBuys++;
        -: 1334:
    #####: 1335:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1336:    {
        -: 1337:      //gain coins equal to trashed card
    #####: 1338:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1339:      //trash card
    #####: 1340:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1341:    }
        -: 1342:
        -: 1343:    //discard card
    #####: 1344:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1345:    return 0;
        -: 1346:
        -: 1347:  case sea_hag:
    #####: 1348:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1349:    {
    #####: 1350:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1351:      {
    #####: 1352:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1353:        state->deckCount[i]--;
    #####: 1354:        state->discardCount[i]++;
    #####: 1355:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1356:      }
        -: 1357:    }
    #####: 1358:    return 0;
        -: 1359:
        -: 1360:  case treasure_map:
        -: 1361:    //search hand for another treasure_map
    #####: 1362:    index = -1;
    #####: 1363:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1364:    {
    #####: 1365:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1366:      {
    #####: 1367:        index = i;
    #####: 1368:        break;
        -: 1369:      }
        -: 1370:    }
    #####: 1371:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1372:    {
        -: 1373:      //trash both treasure cards
    #####: 1374:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1375:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1376:
        -: 1377:      //gain 4 Gold cards
    #####: 1378:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1379:      {
    #####: 1380:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1381:      }
        -: 1382:
        -: 1383:      //return success
    #####: 1384:      return 1;
        -: 1385:    }
        -: 1386:
        -: 1387:    //no second treasure_map found in hand
    #####: 1388:    return -1;
        -: 1389:  }
        -: 1390:
    #####: 1391:  return -1;
        -: 1392:}
        -: 1393:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1394:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1395:{
        -: 1396:
        -: 1397:  //if card is not trashed, added to Played pile
        3: 1398:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1399:  {
        -: 1400:    //add card to played pile
        3: 1401:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1402:    state->playedCardCount++;
        -: 1403:  }
        -: 1404:
        -: 1405:  //set played card to -1
        3: 1406:  state->hand[currentPlayer][handPos] = -1;
        -: 1407:
        -: 1408:  //remove card from player's hand
        3: 1409:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1410:  {
        -: 1411:    //reduce number of cards in hand
    #####: 1412:    state->handCount[currentPlayer]--;
        -: 1413:  }
        3: 1414:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1415:  {
        -: 1416:    //reduce number of cards in hand
    #####: 1417:    state->handCount[currentPlayer]--;
        -: 1418:  }
        -: 1419:  else
        -: 1420:  {
        -: 1421:    //replace discarded card with last card in hand
        3: 1422:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1423:    //set last card to -1
        3: 1424:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1425:    //reduce number of cards in hand
        3: 1426:    state->handCount[currentPlayer]--;
        -: 1427:  }
        -: 1428:
        3: 1429:  return 0;
        -: 1430:}
        -: 1431:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1432:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1433:{
        -: 1434:  //Note: supplyPos is enum of choosen card
        -: 1435:
        -: 1436:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1437:  if (supplyCount(supplyPos, state) < 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1438:  {
    #####: 1439:    return -1;
        -: 1440:  }
        -: 1441:
        -: 1442:  //added card for [whoseTurn] current player:
        -: 1443:  // toFlag = 0 : add to discard
        -: 1444:  // toFlag = 1 : add to deck
        -: 1445:  // toFlag = 2 : add to hand
        -: 1446:
    #####: 1447:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1448:  {
    #####: 1449:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1450:    state->deckCount[player]++;
        -: 1451:  }
    #####: 1452:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1453:  {
    #####: 1454:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1455:    state->handCount[player]++;
        -: 1456:  }
        -: 1457:  else
        -: 1458:  {
    #####: 1459:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1460:    state->discardCount[player]++;
        -: 1461:  }
        -: 1462:
        -: 1463:  //decrease number in supply pile
    #####: 1464:  state->supplyCount[supplyPos]--;
        -: 1465:
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1469:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1470:{
        -: 1471:  int i;
        -: 1472:
        -: 1473:  //reset coin count
        8: 1474:  state->coins = 0;
        -: 1475:
        -: 1476:  //add coins for each Treasure card in player's hand
       48: 1477:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1478:  {
       40: 1479:    if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1480:    {
       32: 1481:      state->coins += 1;
        -: 1482:    }
        8: 1483:    else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1484:    {
    #####: 1485:      state->coins += 2;
        -: 1486:    }
        8: 1487:    else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1488:    {
    #####: 1489:      state->coins += 3;
        -: 1490:    }
        -: 1491:  }
        -: 1492:
        -: 1493:  //add bonus
        8: 1494:  state->coins += bonus;
        -: 1495:
        8: 1496:  return 0;
        -: 1497:}
        -: 1498:
        -: 1499://end of dominion.c
File 'dominion.c'
Lines executed:33.73% of 584
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      240:    8:int compare(const void *a, const void *b)
        -:    9:{
      240:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
      240:   12:  if (*(int *)a < *(int *)b)
       64:   13:    return -1;
      176:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        8:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        8:   48:  SelectStream(1);
        8:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        8:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        8:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       88:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      880:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      800:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        8:   76:  if (numPlayers == 2)
        -:   77:  {
        8:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        8:   90:  if (numPlayers == 2)
        -:   91:  {
        8:   92:    state->supplyCount[estate] = 8;
        8:   93:    state->supplyCount[duchy] = 8;
        8:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        8:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  105:  state->supplyCount[silver] = 40;
        8:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      168:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
     1320:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
     1240:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
       80:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
       16:  118:          if (numPlayers == 2)
        -:  119:          {
        8:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
       72:  129:          state->supplyCount[i] = 10;
        -:  130:        }
       80:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
     1160:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       24:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
       16:  146:    state->deckCount[i] = 0;
       64:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
       48:  149:      state->deck[i][j] = estate;
       48:  150:      state->deckCount[i]++;
        -:  151:    }
      128:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
      112:  154:      state->deck[i][j] = copper;
      112:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
       24:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
       16:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
       24:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
       16:  172:    state->handCount[i] = 0;
       16:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //  {
        -:  177:    //    drawCard(i, state);
        -:  178:    //  }
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      224:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
      216:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        8:  188:  state->outpostPlayed = 0;
        8:  189:  state->phase = 0;
        8:  190:  state->numActions = 1;
        8:  191:  state->numBuys = 1;
        8:  192:  state->playedCardCount = 0;
        8:  193:  state->whoseTurn = 0;
        8:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       48:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
       40:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        8:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        8:  205:  return 0;
        -:  206:}
        -:  207:
       20:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       20:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       20:  216:  if (state->deckCount[player] < 1)
        4:  217:    return -1;
       16:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      192:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
      160:  223:    card = floor(Random() * state->deckCount[player]);
      160:  224:    newDeck[newDeckPos] = state->deck[player][card];
      160:  225:    newDeckPos++;
      560:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
      400:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
      160:  230:    state->deckCount[player]--;
        -:  231:  }
      176:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
      160:  234:    state->deck[player][i] = newDeck[i];
      160:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
       16:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
       30:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
       30:  337:  int currentPlayer = whoseTurn(state);
       30:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
    #####:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
        6:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
        6:  349:  int count = 0;
        -:  350:
       36:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
       30:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
       36:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
       30:  359:    if (state->hand[player][i] == card)
        1:  360:      count++;
        -:  361:  }
        -:  362:
        6:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
        6:  369:  return count;
        -:  370:}
        -:  371:
       42:  372:int whoseTurn(struct gameState *state)
        -:  373:{
       42:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
       59:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
       59:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
        2:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
        2:  630:    state->deckCount[player] = state->discardCount[player];
        2:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
        2:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
        2:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
        2:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
        2:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
        2:  653:    if (deckCounter == 0)
        2:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
       57:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
       57:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
       57:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
       57:  672:    state->deckCount[player]--;
       57:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
       57:  676:  return 0;
        -:  677:}
        -:  678:
       28:  679:int getCost(int cardNumber)
        -:  680:{
       28:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
        1:  684:    return 0;
        -:  685:  case estate:
        1:  686:    return 2;
        -:  687:  case duchy:
        1:  688:    return 5;
        -:  689:  case province:
        1:  690:    return 8;
        -:  691:  case copper:
        1:  692:    return 0;
        -:  693:  case silver:
        1:  694:    return 3;
        -:  695:  case gold:
        1:  696:    return 6;
        -:  697:  case adventurer:
        1:  698:    return 6;
        -:  699:  case council_room:
        1:  700:    return 5;
        -:  701:  case feast:
        1:  702:    return 4;
        -:  703:  case gardens:
        1:  704:    return 4;
        -:  705:  case mine:
        1:  706:    return 5;
        -:  707:  case remodel:
        1:  708:    return 4;
        -:  709:  case smithy:
        2:  710:    return 4;
        -:  711:  case village:
        1:  712:    return 3;
        -:  713:  case baron:
        1:  714:    return 4;
        -:  715:  case great_hall:
        1:  716:    return 3;
        -:  717:  case minion:
        1:  718:    return 5;
        -:  719:  case steward:
        1:  720:    return 3;
        -:  721:  case tribute:
        1:  722:    return 5;
        -:  723:  case ambassador:
        1:  724:    return 3;
        -:  725:  case cutpurse:
        1:  726:    return 4;
        -:  727:  case embargo:
        1:  728:    return 2;
        -:  729:  case outpost:
        1:  730:    return 5;
        -:  731:  case salvager:
        1:  732:    return 4;
        -:  733:  case sea_hag:
        1:  734:    return 4;
        -:  735:  case treasure_map:
        1:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int gardensEffect()
        -:  743:{
    #####:  744:  return 0;
        -:  745:}
        -:  746:
    #####:  747:int outpostEffect(struct gameState *state, int handPos)
        -:  748:{
        -:  749:  //set outpost flag
    #####:  750:  state->outpostPlayed--;
        -:  751:
        -:  752:  //discard card
    #####:  753:  int currentPlayer = whoseTurn(state);
    #####:  754:  discardCard(handPos, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int great_hallEffect(struct gameState *state, int handPos)
        -:  759:{
    #####:  760:  int currentPlayer = whoseTurn(state);
        -:  761:
        -:  762:  // +1 Card
    #####:  763:  drawCard(currentPlayer, state);
        -:  764:
        -:  765:  //+1 Actions
    #####:  766:  state->numActions++;
        -:  767:
        -:  768:  //discard card from hand
    #####:  769:  discardCard(handPos, currentPlayer, state, 0);
    #####:  770:  return 0;
        -:  771:}
        -:  772:
        1:  773:int smithyEffect(struct gameState *state, int handPos)
        -:  774:{
        1:  775:  int currentPlayer = whoseTurn(state);
        -:  776:
        -:  777:  //+3 Cards
        6:  778:  for (int i = 0; i < 5; i++)
        -:  779:  {
        5:  780:    drawCard(currentPlayer, state);
        -:  781:  }
        -:  782:
        -:  783:  //discard card from hand
        1:  784:  discardCard(handPos, currentPlayer, state, 0);
        1:  785:  return 0;
        -:  786:}
        -:  787:
        2:  788:int adventurerEffect(struct gameState *state)
        -:  789:{
        2:  790:  int currentPlayer = whoseTurn(state);
        2:  791:  int drawntreasure = 0;
        -:  792:  int cardDrawn;
        -:  793:  int temphand[MAX_HAND];
        2:  794:  int z = 0;
        -:  795:
       12:  796:  while (drawntreasure < 3)
        -:  797:  {
        8:  798:    if (state->deckCount[currentPlayer] < 1)
        -:  799:    { //if the deck is empty we need to shuffle discard and add to deck
        2:  800:      shuffle(currentPlayer, state);
        -:  801:    }
        8:  802:    drawCard(currentPlayer, state);
        8:  803:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        8:  804:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        6:  805:      drawntreasure++;
        -:  806:    else
        -:  807:    {
        2:  808:      temphand[z] = cardDrawn;
        2:  809:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  810:      z++;
        -:  811:    }
        -:  812:  }
        6:  813:  while (z - 1 >= 0)
        -:  814:  {
        2:  815:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        2:  816:    z = z - 1;
        -:  817:  }
        2:  818:  return 0;
        -:  819:}
        -:  820:
        5:  821:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  822:{
        -:  823:  int i;
        -:  824:  int j;
        -:  825:  int k;
        -:  826:  int x;
        -:  827:  int index;
        5:  828:  int currentPlayer = whoseTurn(state);
        5:  829:  int nextPlayer = currentPlayer + 1;
        -:  830:
        5:  831:  int tributeRevealedCards[2] = {-1, -1};
        -:  832:  int temphand[MAX_HAND]; // moved above the if statement
        -:  833:  //int drawntreasure = 0;
        -:  834:  //int cardDrawn;
        -:  835:  //int z = 0; // this is the counter for the temp hand
        5:  836:  if (nextPlayer > (state->numPlayers - 1))
        -:  837:  {
    #####:  838:    nextPlayer = 0;
        -:  839:  }
        -:  840:
        -:  841:  //uses switch to select card and perform actions
        5:  842:  switch (card)
        -:  843:  {
        -:  844:
        -:  845:  case adventurer:
        2:  846:    return adventurerEffect(state);
        -:  847:
        -:  848:  case council_room:
        -:  849:    //+4 Cards
        5:  850:    for (i = 0; i < 4; i++)
        -:  851:    {
        4:  852:      drawCard(currentPlayer, state);
        -:  853:    }
        -:  854:
        -:  855:    //+1 Buy
        1:  856:    state->numBuys++;
        -:  857:
        -:  858:    //Each other player draws a card
        3:  859:    for (i = 0; i < state->numPlayers; i++)
        -:  860:    {
        2:  861:      if (i != currentPlayer)
        -:  862:      {
        1:  863:        drawCard(i, state);
        -:  864:      }
        -:  865:    }
        -:  866:
        -:  867:    //put played card in played card pile
        1:  868:    discardCard(handPos, currentPlayer, state, 0);
        -:  869:
        1:  870:    return 0;
        -:  871:
        -:  872:  case feast:
        -:  873:    //gain card with cost up to 5
        -:  874:    //Backup hand
    #####:  875:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  876:    {
    #####:  877:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  878:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  879:    }
        -:  880:    //Backup hand
        -:  881:
        -:  882:    //Update Coins for Buy
    #####:  883:    updateCoins(currentPlayer, state, 5);
    #####:  884:    x = 1; //Condition to loop on
    #####:  885:    while (x == 1)
        -:  886:    { //Buy one card
    #####:  887:      if (supplyCount(choice1, state) <= 0)
        -:  888:      {
        -:  889:        if (DEBUG)
        -:  890:          printf("None of that card left, sorry!\n");
        -:  891:
        -:  892:        if (DEBUG)
        -:  893:        {
        -:  894:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  895:        }
        -:  896:      }
    #####:  897:      else if (state->coins < getCost(choice1))
        -:  898:      {
    #####:  899:        printf("That card is too expensive!\n");
        -:  900:
        -:  901:        if (DEBUG)
        -:  902:        {
        -:  903:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  904:        }
        -:  905:      }
        -:  906:      else
        -:  907:      {
        -:  908:
        -:  909:        if (DEBUG)
        -:  910:        {
        -:  911:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  912:        }
        -:  913:
    #####:  914:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  915:        x = 0;                                      //No more buying cards
        -:  916:
        -:  917:        if (DEBUG)
        -:  918:        {
        -:  919:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:        }
        -:  921:      }
        -:  922:    }
        -:  923:
        -:  924:    //Reset Hand
    #####:  925:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  926:    {
    #####:  927:      state->hand[currentPlayer][i] = temphand[i];
    #####:  928:      temphand[i] = -1;
        -:  929:    }
        -:  930:    //Reset Hand
        -:  931:
    #####:  932:    return 0;
        -:  933:
        -:  934:  case gardens:
    #####:  935:    return gardensEffect();
        -:  936:
        -:  937:  case mine:
    #####:  938:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  939:
    #####:  940:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  941:    {
    #####:  942:      return -1;
        -:  943:    }
        -:  944:
    #####:  945:    if (choice2 > treasure_map || choice2 < curse)
        -:  946:    {
    #####:  947:      return -1;
        -:  948:    }
        -:  949:
    #####:  950:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  951:    {
    #####:  952:      return -1;
        -:  953:    }
        -:  954:
    #####:  955:    gainCard(choice2, state, 2, currentPlayer);
        -:  956:
        -:  957:    //discard card from hand
    #####:  958:    discardCard(handPos, currentPlayer, state, 0);
        -:  959:
        -:  960:    //discard trashed card
    #####:  961:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  962:    {
    #####:  963:      if (state->hand[currentPlayer][i] == j)
        -:  964:      {
    #####:  965:        discardCard(i, currentPlayer, state, 0);
    #####:  966:        break;
        -:  967:      }
        -:  968:    }
        -:  969:
    #####:  970:    return 0;
        -:  971:
        -:  972:  case remodel:
    #####:  973:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  974:
    #####:  975:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  976:    {
    #####:  977:      return -1;
        -:  978:    }
        -:  979:
    #####:  980:    gainCard(choice2, state, 0, currentPlayer);
        -:  981:
        -:  982:    //discard card from hand
    #####:  983:    discardCard(handPos, currentPlayer, state, 0);
        -:  984:
        -:  985:    //discard trashed card
    #####:  986:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:    {
    #####:  988:      if (state->hand[currentPlayer][i] == j)
        -:  989:      {
    #####:  990:        discardCard(i, currentPlayer, state, 0);
    #####:  991:        break;
        -:  992:      }
        -:  993:    }
        -:  994:
    #####:  995:    return 0;
        -:  996:
        -:  997:  case smithy:
        1:  998:    return smithyEffect(state, handPos);
        -:  999:
        -: 1000:  case village:
        -: 1001:    //+1 Card
        1: 1002:    drawCard(currentPlayer, state);
        -: 1003:
        -: 1004:    //+2 Actions
        1: 1005:    state->numActions = state->numActions + 2;
        -: 1006:
        -: 1007:    //discard played card from hand
        1: 1008:    discardCard(handPos, currentPlayer, state, 0);
        1: 1009:    return 0;
        -: 1010:
        -: 1011:  case baron:
    #####: 1012:    state->numBuys++; //Increase buys by 1!
    #####: 1013:    if (choice1 > 0)
        -: 1014:    {                             //Boolean true or going to discard an estate
    #####: 1015:      int p = 0;                  //Iterator for hand!
    #####: 1016:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1017:      while (card_not_discarded)
        -: 1018:      {
    #####: 1019:        if (state->hand[currentPlayer][p] == estate)
        -: 1020:        {                    //Found an estate card!
    #####: 1021:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1022:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1023:          state->discardCount[currentPlayer]++;
    #####: 1024:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1025:          {
    #####: 1026:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1027:          }
    #####: 1028:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1029:          state->handCount[currentPlayer]--;
    #####: 1030:          card_not_discarded = 0; //Exit the loop
        -: 1031:        }
    #####: 1032:        else if (p > state->handCount[currentPlayer])
        -: 1033:        {
        -: 1034:          if (DEBUG)
        -: 1035:          {
        -: 1036:            printf("No estate cards in your hand, invalid choice\n");
        -: 1037:            printf("Must gain an estate if there are any\n");
        -: 1038:          }
    #####: 1039:          if (supplyCount(estate, state) > 0)
        -: 1040:          {
    #####: 1041:            gainCard(estate, state, 0, currentPlayer);
    #####: 1042:            state->supplyCount[estate]--; //Decrement estates
    #####: 1043:            if (supplyCount(estate, state) == 0)
        -: 1044:            {
    #####: 1045:              isGameOver(state);
        -: 1046:            }
        -: 1047:          }
    #####: 1048:          card_not_discarded = 0; //Exit the loop
        -: 1049:        }
        -: 1050:
        -: 1051:        else
        -: 1052:        {
    #####: 1053:          p++; //Next card
        -: 1054:        }
        -: 1055:      }
        -: 1056:    }
        -: 1057:
        -: 1058:    else
        -: 1059:    {
    #####: 1060:      if (supplyCount(estate, state) > 0)
        -: 1061:      {
    #####: 1062:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1063:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1064:        if (supplyCount(estate, state) == 0)
        -: 1065:        {
    #####: 1066:          isGameOver(state);
        -: 1067:        }
        -: 1068:      }
        -: 1069:    }
        -: 1070:
    #####: 1071:    return 0;
        -: 1072:
        -: 1073:  case great_hall:
    #####: 1074:    return great_hallEffect(state, handPos);
        -: 1075:
        -: 1076:  case minion:
        -: 1077:    //+1 action
    #####: 1078:    state->numActions++;
        -: 1079:
        -: 1080:    //discard card from hand
    #####: 1081:    discardCard(handPos, currentPlayer, state, 0);
        -: 1082:
    #####: 1083:    if (choice1) //+2 coins
        -: 1084:    {
    #####: 1085:      state->coins = state->coins + 2;
        -: 1086:    }
        -: 1087:
    #####: 1088:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1089:    {
        -: 1090:      //discard hand
    #####: 1091:      while (numHandCards(state) > 0)
        -: 1092:      {
    #####: 1093:        discardCard(handPos, currentPlayer, state, 0);
        -: 1094:      }
        -: 1095:
        -: 1096:      //draw 4
    #####: 1097:      for (i = 0; i < 4; i++)
        -: 1098:      {
    #####: 1099:        drawCard(currentPlayer, state);
        -: 1100:      }
        -: 1101:
        -: 1102:      //other players discard hand and redraw if hand size > 4
    #####: 1103:      for (i = 0; i < state->numPlayers; i++)
        -: 1104:      {
    #####: 1105:        if (i != currentPlayer)
        -: 1106:        {
    #####: 1107:          if (state->handCount[i] > 4)
        -: 1108:          {
        -: 1109:            //discard hand
    #####: 1110:            while (state->handCount[i] > 0)
        -: 1111:            {
    #####: 1112:              discardCard(handPos, i, state, 0);
        -: 1113:            }
        -: 1114:
        -: 1115:            //draw 4
    #####: 1116:            for (j = 0; j < 4; j++)
        -: 1117:            {
    #####: 1118:              drawCard(i, state);
        -: 1119:            }
        -: 1120:          }
        -: 1121:        }
        -: 1122:      }
        -: 1123:    }
    #####: 1124:    return 0;
        -: 1125:
        -: 1126:  case steward:
    #####: 1127:    if (choice1 == 1)
        -: 1128:    {
        -: 1129:      //+2 cards
    #####: 1130:      drawCard(currentPlayer, state);
    #####: 1131:      drawCard(currentPlayer, state);
        -: 1132:    }
    #####: 1133:    else if (choice1 == 2)
        -: 1134:    {
        -: 1135:      //+2 coins
    #####: 1136:      state->coins = state->coins + 2;
        -: 1137:    }
        -: 1138:    else
        -: 1139:    {
        -: 1140:      //trash 2 cards in hand
    #####: 1141:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1142:      discardCard(choice3, currentPlayer, state, 1);
        -: 1143:    }
        -: 1144:
        -: 1145:    //discard card from hand
    #####: 1146:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1147:    return 0;
        -: 1148:
        -: 1149:  case tribute:
    #####: 1150:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1151:    {
    #####: 1152:      if (state->deckCount[nextPlayer] > 0)
        -: 1153:      {
    #####: 1154:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1155:        state->deckCount[nextPlayer]--;
        -: 1156:      }
    #####: 1157:      else if (state->discardCount[nextPlayer] > 0)
        -: 1158:      {
    #####: 1159:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1160:        state->discardCount[nextPlayer]--;
        -: 1161:      }
        -: 1162:      else
        -: 1163:      {
        -: 1164:        //No Card to Reveal
        -: 1165:        if (DEBUG)
        -: 1166:        {
        -: 1167:          printf("No cards to reveal\n");
        -: 1168:        }
        -: 1169:      }
        -: 1170:    }
        -: 1171:
        -: 1172:    else
        -: 1173:    {
    #####: 1174:      if (state->deckCount[nextPlayer] == 0)
        -: 1175:      {
    #####: 1176:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1177:        {
    #####: 1178:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1179:          state->deckCount[nextPlayer]++;
    #####: 1180:          state->discard[nextPlayer][i] = -1;
    #####: 1181:          state->discardCount[nextPlayer]--;
        -: 1182:        }
        -: 1183:
    #####: 1184:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1185:      }
    #####: 1186:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1187:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1188:      state->deckCount[nextPlayer]--;
    #####: 1189:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1190:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1191:      state->deckCount[nextPlayer]--;
        -: 1192:    }
        -: 1193:
    #####: 1194:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1195:    { //If we have a duplicate card, just drop one
    #####: 1196:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1197:      state->playedCardCount++;
    #####: 1198:      tributeRevealedCards[1] = -1;
        -: 1199:    }
        -: 1200:
    #####: 1201:    for (i = 0; i <= 2; i++)
        -: 1202:    {
    #####: 1203:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1204:      { //Treasure cards
    #####: 1205:        state->coins += 2;
        -: 1206:      }
        -: 1207:
    #####: 1208:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1209:      { //Victory Card Found
    #####: 1210:        drawCard(currentPlayer, state);
    #####: 1211:        drawCard(currentPlayer, state);
        -: 1212:      }
        -: 1213:      else
        -: 1214:      { //Action Card
    #####: 1215:        state->numActions = state->numActions + 2;
        -: 1216:      }
        -: 1217:    }
        -: 1218:
    #####: 1219:    return 0;
        -: 1220:
        -: 1221:  case ambassador:
    #####: 1222:    j = 0; //used to check if player has enough cards to discard
        -: 1223:
    #####: 1224:    if (choice2 > 2 || choice2 < 0)
        -: 1225:    {
    #####: 1226:      return -1;
        -: 1227:    }
        -: 1228:
    #####: 1229:    if (choice1 == handPos)
        -: 1230:    {
    #####: 1231:      return -1;
        -: 1232:    }
        -: 1233:
    #####: 1234:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:    {
    #####: 1236:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1237:      {
    #####: 1238:        j++;
        -: 1239:      }
        -: 1240:    }
    #####: 1241:    if (j < choice2)
        -: 1242:    {
    #####: 1243:      return -1;
        -: 1244:    }
        -: 1245:
        -: 1246:    if (DEBUG)
        -: 1247:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1248:
        -: 1249:    //increase supply count for choosen card by amount being discarded
    #####: 1250:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1251:
        -: 1252:    //each other player gains a copy of revealed card
    #####: 1253:    for (i = 0; i < state->numPlayers; i++)
        -: 1254:    {
    #####: 1255:      if (i != currentPlayer)
        -: 1256:      {
    #####: 1257:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1258:      }
        -: 1259:    }
        -: 1260:
        -: 1261:    //discard played card from hand
    #####: 1262:    discardCard(handPos, currentPlayer, state, 0);
        -: 1263:
        -: 1264:    //trash copies of cards returned to supply
    #####: 1265:    for (j = 0; j < choice2; j++)
        -: 1266:    {
    #####: 1267:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1268:      {
    #####: 1269:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1270:        {
    #####: 1271:          discardCard(i, currentPlayer, state, 1);
    #####: 1272:          break;
        -: 1273:        }
        -: 1274:      }
        -: 1275:    }
        -: 1276:
    #####: 1277:    return 0;
        -: 1278:
        -: 1279:  case cutpurse:
        -: 1280:
    #####: 1281:    updateCoins(currentPlayer, state, 2);
    #####: 1282:    for (i = 0; i < state->numPlayers; i++)
        -: 1283:    {
    #####: 1284:      if (i != currentPlayer)
        -: 1285:      {
    #####: 1286:        for (j = 0; j < state->handCount[i]; j++)
        -: 1287:        {
    #####: 1288:          if (state->hand[i][j] == copper)
        -: 1289:          {
    #####: 1290:            discardCard(j, i, state, 0);
    #####: 1291:            break;
        -: 1292:          }
    #####: 1293:          if (j == state->handCount[i])
        -: 1294:          {
    #####: 1295:            for (k = 0; k < state->handCount[i]; k++)
        -: 1296:            {
        -: 1297:              if (DEBUG)
        -: 1298:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1299:            }
    #####: 1300:            break;
        -: 1301:          }
        -: 1302:        }
        -: 1303:      }
        -: 1304:    }
        -: 1305:
        -: 1306:    //discard played card from hand
    #####: 1307:    discardCard(handPos, currentPlayer, state, 0);
        -: 1308:
    #####: 1309:    return 0;
        -: 1310:
        -: 1311:  case embargo:
        -: 1312:    //+2 Coins
    #####: 1313:    state->coins = state->coins + 2;
        -: 1314:
        -: 1315:    //see if selected pile is in play
    #####: 1316:    if (state->supplyCount[choice1] == -1)
        -: 1317:    {
    #####: 1318:      return -1;
        -: 1319:    }
        -: 1320:
        -: 1321:    //add embargo token to selected supply pile
    #####: 1322:    state->embargoTokens[choice1]++;
        -: 1323:
        -: 1324:    //trash card
    #####: 1325:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1326:    return 0;
        -: 1327:
        -: 1328:  case outpost:
    #####: 1329:    return outpostEffect(state, handPos);
        -: 1330:
        -: 1331:  case salvager:
        -: 1332:    //+1 buy
    #####: 1333:    state->numBuys++;
        -: 1334:
    #####: 1335:    if (choice1)
        -: 1336:    {
        -: 1337:      //gain coins equal to trashed card
    #####: 1338:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1339:      //trash card
    #####: 1340:      discardCard(choice1, currentPlayer, state, 1);
        -: 1341:    }
        -: 1342:
        -: 1343:    //discard card
    #####: 1344:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1345:    return 0;
        -: 1346:
        -: 1347:  case sea_hag:
    #####: 1348:    for (i = 0; i < state->numPlayers; i++)
        -: 1349:    {
    #####: 1350:      if (i != currentPlayer)
        -: 1351:      {
    #####: 1352:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1353:        state->deckCount[i]--;
    #####: 1354:        state->discardCount[i]++;
    #####: 1355:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1356:      }
        -: 1357:    }
    #####: 1358:    return 0;
        -: 1359:
        -: 1360:  case treasure_map:
        -: 1361:    //search hand for another treasure_map
    #####: 1362:    index = -1;
    #####: 1363:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1364:    {
    #####: 1365:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1366:      {
    #####: 1367:        index = i;
    #####: 1368:        break;
        -: 1369:      }
        -: 1370:    }
    #####: 1371:    if (index > -1)
        -: 1372:    {
        -: 1373:      //trash both treasure cards
    #####: 1374:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1375:      discardCard(index, currentPlayer, state, 1);
        -: 1376:
        -: 1377:      //gain 4 Gold cards
    #####: 1378:      for (i = 0; i < 4; i++)
        -: 1379:      {
    #####: 1380:        gainCard(gold, state, 1, currentPlayer);
        -: 1381:      }
        -: 1382:
        -: 1383:      //return success
    #####: 1384:      return 1;
        -: 1385:    }
        -: 1386:
        -: 1387:    //no second treasure_map found in hand
    #####: 1388:    return -1;
        -: 1389:  }
        -: 1390:
    #####: 1391:  return -1;
        -: 1392:}
        -: 1393:
        3: 1394:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1395:{
        -: 1396:
        -: 1397:  //if card is not trashed, added to Played pile
        3: 1398:  if (trashFlag < 1)
        -: 1399:  {
        -: 1400:    //add card to played pile
        3: 1401:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1402:    state->playedCardCount++;
        -: 1403:  }
        -: 1404:
        -: 1405:  //set played card to -1
        3: 1406:  state->hand[currentPlayer][handPos] = -1;
        -: 1407:
        -: 1408:  //remove card from player's hand
        3: 1409:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1410:  {
        -: 1411:    //reduce number of cards in hand
    #####: 1412:    state->handCount[currentPlayer]--;
        -: 1413:  }
        3: 1414:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1415:  {
        -: 1416:    //reduce number of cards in hand
    #####: 1417:    state->handCount[currentPlayer]--;
        -: 1418:  }
        -: 1419:  else
        -: 1420:  {
        -: 1421:    //replace discarded card with last card in hand
        3: 1422:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1423:    //set last card to -1
        3: 1424:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1425:    //reduce number of cards in hand
        3: 1426:    state->handCount[currentPlayer]--;
        -: 1427:  }
        -: 1428:
        3: 1429:  return 0;
        -: 1430:}
        -: 1431:
    #####: 1432:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1433:{
        -: 1434:  //Note: supplyPos is enum of choosen card
        -: 1435:
        -: 1436:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1437:  if (supplyCount(supplyPos, state) < 1)
        -: 1438:  {
    #####: 1439:    return -1;
        -: 1440:  }
        -: 1441:
        -: 1442:  //added card for [whoseTurn] current player:
        -: 1443:  // toFlag = 0 : add to discard
        -: 1444:  // toFlag = 1 : add to deck
        -: 1445:  // toFlag = 2 : add to hand
        -: 1446:
    #####: 1447:  if (toFlag == 1)
        -: 1448:  {
    #####: 1449:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1450:    state->deckCount[player]++;
        -: 1451:  }
    #####: 1452:  else if (toFlag == 2)
        -: 1453:  {
    #####: 1454:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1455:    state->handCount[player]++;
        -: 1456:  }
        -: 1457:  else
        -: 1458:  {
    #####: 1459:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1460:    state->discardCount[player]++;
        -: 1461:  }
        -: 1462:
        -: 1463:  //decrease number in supply pile
    #####: 1464:  state->supplyCount[supplyPos]--;
        -: 1465:
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        8: 1469:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1470:{
        -: 1471:  int i;
        -: 1472:
        -: 1473:  //reset coin count
        8: 1474:  state->coins = 0;
        -: 1475:
        -: 1476:  //add coins for each Treasure card in player's hand
       48: 1477:  for (i = 0; i < state->handCount[player]; i++)
        -: 1478:  {
       40: 1479:    if (state->hand[player][i] == copper)
        -: 1480:    {
       32: 1481:      state->coins += 1;
        -: 1482:    }
        8: 1483:    else if (state->hand[player][i] == silver)
        -: 1484:    {
    #####: 1485:      state->coins += 2;
        -: 1486:    }
        8: 1487:    else if (state->hand[player][i] == gold)
        -: 1488:    {
    #####: 1489:      state->coins += 3;
        -: 1490:    }
        -: 1491:  }
        -: 1492:
        -: 1493:  //add bonus
        8: 1494:  state->coins += bonus;
        -: 1495:
        8: 1496:  return 0;
        -: 1497:}
        -: 1498:
        -: 1499://end of dominion.c
